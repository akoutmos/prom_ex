use Mix.Config

# Configure your database
config :web_app, WebApp.Repo,
  username: "postgres",
  password: "postgres",
  database: "web_app_dev",
  hostname: System.get_env("POSTGRES_HOST", "localhost"),
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

config :web_app, WebApp.Repo2,
  username: "postgres",
  password: "postgres",
  database: "web_app_dev",
  hostname: System.get_env("POSTGRES_HOST", "localhost"),
  show_sensitive_data_on_connection_error: true,
  pool_size: 10

config :web_app, WebApp.PromEx,
  manual_metrics_start_delay: :no_delay,
  drop_metrics_groups: [],
  grafana: [
    host: System.get_env("GRAFANA_HOST", "http://grafana:3000"),
    # auth_token: System.get_env("GRAFANA_TOKEN", ""),
    username: "admin",
    password: "admin",
    upload_dashboards_on_start: true,
    folder_name: "Web App Dashboards",
    annotate_app_lifecycle: true
  ],
  metrics_server: [
    port: 4021,
    path: "/metrics",
    protocol: :http,
    pool_size: 5,
    cowboy_opts: []
  ]

config :web_app, WebApp.Limited.PromEx,
  manual_metrics_start_delay: 10_000,
  drop_metrics_groups: [],
  metrics_server: [
    port: 4022,
    path: "/cool-metrics"
  ]

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :web_app, WebAppWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false

# watchers: [
#   node: [
#     "node_modules/webpack/bin/webpack.js",
#     "--mode",
#     "development",
#     "--watch-stdin",
#     cd: Path.expand("../assets", __DIR__)
#   ]
# ]

config :web_app, WebAppWeb.InternalEndpoint,
  http: [port: 4001],
  debug_errors: true,
  code_reloader: true,
  check_origin: false

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :web_app, WebAppWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/web_app_web/(live|views)/.*(ex)$",
      ~r"lib/web_app_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
